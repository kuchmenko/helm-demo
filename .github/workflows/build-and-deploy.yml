name: Build & Deploy

on:
  push:
    branches: [develop, main]
    paths: ["apps/**", "infra/**"]

permissions:
  id-token: write
  contents: read

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  CLUSTER_NAME: helm-demo
  REGISTRY: us-central1-docker.pkg.dev

jobs:
  get-affected-apps:
    uses: ./.github/workflows/get-affected-apps.yaml

  build-deploy:
    needs: get-affected-apps
    if: ${{ needs.get-affected-apps.outputs.has_affected_apps == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.get-affected-apps.outputs.affected_apps) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Install standalone Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - run: gcloud auth configure-docker $REGISTRY --quiet

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.app }}/${{ matrix.app }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{ is_default_branch }}

      - uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Export project number
        run: |
          echo "PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID \
          --format='value(projectNumber)')" >> "$GITHUB_ENV"

      - id: gsm
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |
            COMMON_ENV:projects/${{ env.PROJECT_ID }}/secrets/COMMON_ENV/versions/latest

      - run: |
          echo "global:"           >  /tmp/secret-values.yaml
          echo "  backingStores:"  >> /tmp/secret-values.yaml
          printf '%b' "$RAW_COMMON"            \
          | sed '1s/^\xEF\xBB\xBF//'         \
          | jq -r 'to_entries[] | "    \(.key): \"\(.value)\""' \
          >> /tmp/secret-values.yaml

          cat /tmp/secret-values.yaml

      - uses: azure/setup-helm@v4

      - name: Get GKE credentials
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet
          gcloud container clusters get-credentials "$CLUSTER_NAME" \
            --region "$REGION" --project "$PROJECT_ID"

      - name: Helm upgrade / install with auto-rollback
        env:
          IMAGE_TAG: ${{ steps.meta.outputs.version }}
          REGISTRY: ${{ env.REGISTRY }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail

          APP="${{ matrix.app }}"
          CHART_DIR="infrastructure/services/${APP}"

          if [[ ! -f "${CHART_DIR}/Chart.yaml" ]]; then
            echo "::error ::Chart not found at ${CHART_DIR}"
            exit 1
          fi

          helm dependency build "${CHART_DIR}"

          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            ENV_FILE=prd
            NAMESPACE=prd
          else
            ENV_FILE=dev
            NAMESPACE=default
          fi

          echo "Deploying ${APP} to namespace ${NAMESPACE} using ${ENV_FILE}.yaml"

          # Check for stuck releases and clean them up
          echo "üîç Checking for stuck releases..."
          if helm status "$APP" -n "$NAMESPACE" 2>/dev/null | grep -q "pending"; then
            echo "‚ö†Ô∏è Found stuck release, attempting to clean up..."
            
            # Try to get the pending secret and delete it
            PENDING_SECRET=$(kubectl get secrets -n "$NAMESPACE" | grep "${APP}.*pending" | awk '{print $1}' || echo "")
            if [[ -n "$PENDING_SECRET" ]]; then
              echo "üóëÔ∏è Deleting stuck secret: $PENDING_SECRET"
              kubectl delete secret "$PENDING_SECRET" -n "$NAMESPACE" || true
            fi
            
            # Wait a bit for cleanup
            sleep 10
          fi

          # Function to show debugging info on failure
          show_debug_info() {
            echo "::group::üìä Deployment Status"
            echo "Helm release status:"
            helm status "$APP" -n "$NAMESPACE" || true
            
            echo "::endgroup::"
            
            echo "::group::üîç Pod Status"
            echo "Current pods in namespace ${NAMESPACE}:"
            kubectl get pods -n "$NAMESPACE" -l "app.kubernetes.io/instance=${APP}" -o wide || true
            
            echo "::endgroup::"
            
            echo "::group::üìù Pod Events"
            echo "Recent events:"
            kubectl get events -n "$NAMESPACE" --sort-by='.lastTimestamp' --field-selector involvedObject.kind=Pod | tail -20 || true
            
            echo "::endgroup::"
            
            echo "::group::üìã Pod Logs"
            # Get logs from all pods related to this app
            PODS=$(kubectl get pods -n "$NAMESPACE" -l "app.kubernetes.io/instance=${APP}" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
            
            if [[ -n "$PODS" ]]; then
              for pod in $PODS; do
                echo "--- Logs for pod: $pod ---"
                kubectl logs "$pod" -n "$NAMESPACE" --tail=50 --previous=false || echo "No logs available for $pod"
                
                # Also try to get previous container logs if pod restarted
                kubectl logs "$pod" -n "$NAMESPACE" --tail=50 --previous=true 2>/dev/null && echo "--- Previous logs for $pod ---" || true
                echo ""
              done
            else
              echo "No pods found for app ${APP} in namespace ${NAMESPACE}"
            fi
            
            echo "::endgroup::"
            
            echo "::group::üîß Pod Descriptions"
            if [[ -n "$PODS" ]]; then
              for pod in $PODS; do
                echo "--- Description for pod: $pod ---"
                kubectl describe pod "$pod" -n "$NAMESPACE" | tail -30 || true
                echo ""
              done
            fi
            echo "::endgroup::"
          }

          # Attempt deployment with atomic rollback
          if ! helm upgrade "$APP" "$CHART_DIR" \
            -n "$NAMESPACE" --create-namespace \
            -f infrastructure/globals/values-common.yaml \
            -f /tmp/secret-values.yaml \
            -f "$CHART_DIR/values/$ENV_FILE.yaml" \
            --set image.repository=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${APP}/${APP} \
            --set image.tag="$IMAGE_TAG" \
            --set global.gitSha="$GITHUB_SHA" \
            --install --wait --timeout 5m --atomic; then
            
            echo "::error::‚ùå Helm deployment failed!"
            show_debug_info
            
            echo "::group::üîÑ Rollback Status"
            echo "Checking if rollback occurred..."
            helm history "$APP" -n "$NAMESPACE" | tail -5 || true
            echo "::endgroup::"
            
            exit 1
          fi

          echo "‚úÖ Deployment successful!"
          
          # Show final status
          echo "::group::‚ú® Final Status"
          helm status "$APP" -n "$NAMESPACE"
          kubectl get pods -n "$NAMESPACE" -l "app.kubernetes.io/instance=${APP}" -o wide
          echo "::endgroup::"
